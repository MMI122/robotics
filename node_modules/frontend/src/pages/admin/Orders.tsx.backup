import React, { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Typography,
  Button,
  TextField,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  Avatar,
  IconButton,
  Menu,
  MenuItem,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Card,
  CardContent,
  Grid,
  FormControl,
  InputLabel,
  Select,
  Toolbar,
  alpha,
  useTheme,
  Tooltip,
  Tabs,
  Tab,
  List,
  ListItem,
  ListItemText,
  ListItemAvatar,
  Divider,
  Badge,
  LinearProgress,
  TablePagination
} from '@mui/material';
import {
  Search as SearchIcon,
  MoreVert as MoreVertIcon,
  Visibility as ViewIcon,
  Print as PrintIcon,
  LocalShipping as ShippingIcon,
  Cancel as CancelIcon,
  CheckCircle as CompleteIcon,
  Schedule as PendingIcon,
  Payment as PaymentIcon,
  ShoppingCart as OrderIcon,
  TrendingUp as TrendingUpIcon,
  AttachMoney as MoneyIcon,
  Refresh as RefreshIcon,
  FilterList as FilterIcon,
  Download as DownloadIcon,
  Edit as EditIcon,
  NotificationsActive as NotificationIcon
} from '@mui/icons-material';
import { styled } from '@mui/material/styles';
import { motion, AnimatePresence } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import { ordersAPI } from '../../services/api';

const StatsCard = styled(Card)(({ theme }) => ({
  background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.primary.dark} 100%)`,
  color: 'white',
  '&.secondary': {
    background: `linear-gradient(135deg, ${theme.palette.secondary.main} 0%, ${theme.palette.secondary.dark} 100%)`,
  },
  '&.success': {
    background: `linear-gradient(135deg, ${theme.palette.success.main} 0%, ${theme.palette.success.dark} 100%)`,
  },
  '&.warning': {
    background: `linear-gradient(135deg, ${theme.palette.warning.main} 0%, ${theme.palette.warning.dark} 100%)`,
  },
  '&.error': {
    background: `linear-gradient(135deg, ${theme.palette.error.main} 0%, ${theme.palette.error.dark} 100%)`,
  },
}));

const SearchToolbar = styled(Toolbar)(({ theme }) => ({
  backgroundColor: alpha(theme.palette.primary.main, 0.05),
  borderRadius: theme.spacing(2),
  marginBottom: theme.spacing(3),
  minHeight: '64px !important',
}));

const StatusChip = styled(Chip)<{ status: string }>(({ theme, status }) => {
  const statusColors = {
    pending: { bg: theme.palette.warning.main, color: '#fff' },
    processing: { bg: theme.palette.info.main, color: '#fff' },
    shipped: { bg: theme.palette.primary.main, color: '#fff' },
    delivered: { bg: theme.palette.success.main, color: '#fff' },
    cancelled: { bg: theme.palette.error.main, color: '#fff' },
    refunded: { bg: theme.palette.grey[600], color: '#fff' },
  };

  const colors = statusColors[status as keyof typeof statusColors] || statusColors.pending;

  return {
    backgroundColor: colors.bg,
    color: colors.color,
    fontWeight: 600,
    textTransform: 'capitalize',
  };
});

interface Order {
  id: string;
  customerName: string;
  customerEmail: string;
  customerAvatar?: string;
  status: 'pending' | 'processing' | 'shipped' | 'delivered' | 'cancelled' | 'refunded';
  paymentStatus: 'pending' | 'paid' | 'failed' | 'refunded';
  total: number;
  items: number;
  createdAt: string;
  updatedAt: string;
  shippingAddress: {
    street: string;
    city: string;
    state: string;
    country: string;
    postalCode: string;
  };
  orderItems: {
    id: number;
    productName: string;
    productImage: string;
    quantity: number;
    price: number;
  }[];
}

const AdminOrders: React.FC = () => {
  const theme = useTheme();
  const navigate = useNavigate();
  
  const [orders, setOrders] = useState<Order[]>([]);
  const [filteredOrders, setFilteredOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [paymentFilter, setPaymentFilter] = useState('all');
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [menuAnchor, setMenuAnchor] = useState<null | HTMLElement>(null);
  const [orderDetailsOpen, setOrderDetailsOpen] = useState(false);
  const [activeTab, setActiveTab] = useState(0);
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);

  // Fetch orders from API
  useEffect(() => {
    const fetchOrders = async () => {
      try {
        setLoading(true);
        const response = await ordersAPI.getAdminOrders();
        const ordersData = response?.data?.data?.data || [];
        
        // Transform the data to match our Order interface
        const transformedOrders = ordersData.map((order: any) => ({
          id: order.id?.toString() || order.order_number,
          customerName: order.user?.name || 'Unknown Customer',
          customerEmail: order.user?.email || 'No email',
          customerAvatar: '',
          status: order.status,
          paymentStatus: order.payment_status,
          total: parseFloat(order.total_amount) || 0,
          items: 1,
          createdAt: order.created_at,
          updatedAt: order.updated_at,
          shippingAddress: order.shipping_address || {
            street: '',
            city: '',
            state: '',
            country: '',
            postalCode: ''
          },
          orderItems: []
        }));
        
        setOrders(transformedOrders);
        setFilteredOrders(transformedOrders);
      } catch (error) {
        console.error('Error fetching orders:', error);
        setOrders([]);
        setFilteredOrders([]);
      } finally {
        setLoading(false);
      }
    };

    fetchOrders();
  }, []);

  // Filter orders
  useEffect(() => {
    let filtered = orders;

    if (searchQuery) {
      filtered = filtered.filter(order => 
        order.id.toLowerCase().includes(searchQuery.toLowerCase()) ||
        order.customerName.toLowerCase().includes(searchQuery.toLowerCase()) ||
        order.customerEmail.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    if (statusFilter !== 'all') {
      filtered = filtered.filter(order => order.status === statusFilter);
    }

    if (dateFilter !== 'all') {
      const now = new Date();
      const filterDate = new Date();
      
      switch (dateFilter) {
        case 'today':
          filterDate.setHours(0, 0, 0, 0);
          filtered = filtered.filter(order => new Date(order.createdAt) >= filterDate);
          break;
        case 'week':
          filterDate.setDate(now.getDate() - 7);
          filtered = filtered.filter(order => new Date(order.createdAt) >= filterDate);
          break;
        case 'month':
          filterDate.setMonth(now.getMonth() - 1);
          filtered = filtered.filter(order => new Date(order.createdAt) >= filterDate);
          break;
      }
    }

    setFilteredOrders(filtered);
  }, [orders, searchQuery, statusFilter, dateFilter]);
        status: 'pending',
        paymentStatus: 'pending',
        total: 299.99,
        items: 3,
        createdAt: '2024-01-20T10:30:00Z',
        updatedAt: '2024-01-20T10:30:00Z',
        shippingAddress: {
          street: '123 Main St',
          city: 'New York',
          state: 'NY',
          country: 'USA',
          postalCode: '10001'
        },
        orderItems: [
          {
            id: 1,
            productName: 'Arduino Uno R3',
            productImage: '/api/placeholder/60/60',
            quantity: 2,
            price: 25.99
          },
          {
            id: 2,
            productName: 'Breadboard Kit',
            productImage: '/api/placeholder/60/60',
            quantity: 1,
            price: 15.99
          }
        ]
      },
      {
        id: 'ORD-002',
        customerName: 'Jane Smith',
        customerEmail: 'jane@example.com',
        status: 'processing',
        paymentStatus: 'paid',
        total: 149.50,
        items: 2,
        createdAt: '2024-01-19T15:45:00Z',
        updatedAt: '2024-01-20T09:15:00Z',
        shippingAddress: {
          street: '456 Oak Ave',
          city: 'Los Angeles',
          state: 'CA',
          country: 'USA',
          postalCode: '90210'
        },
        orderItems: [
          {
            id: 3,
            productName: 'Raspberry Pi 4',
            productImage: '/api/placeholder/60/60',
            quantity: 1,
            price: 89.99
          }
        ]
      },
      {
        id: 'ORD-003',
        customerName: 'Mike Johnson',
        customerEmail: 'mike@example.com',
        status: 'shipped',
        paymentStatus: 'paid',
        total: 89.99,
        items: 1,
        createdAt: '2024-01-18T08:20:00Z',
        updatedAt: '2024-01-19T14:30:00Z',
        shippingAddress: {
          street: '789 Pine St',
          city: 'Chicago',
          state: 'IL',
          country: 'USA',
          postalCode: '60601'
        },
        orderItems: [
          {
            id: 4,
            productName: 'Servo Motor Kit',
            productImage: '/api/placeholder/60/60',
            quantity: 1,
            price: 89.99
          }
        ]
      },
      {
        id: 'ORD-004',
        customerName: 'Sarah Wilson',
        customerEmail: 'sarah@example.com',
        status: 'delivered',
        paymentStatus: 'paid',
        total: 234.75,
        items: 4,
        createdAt: '2024-01-15T12:10:00Z',
        updatedAt: '2024-01-18T16:45:00Z',
        shippingAddress: {
          street: '321 Elm St',
          city: 'Miami',
          state: 'FL',
          country: 'USA',
          postalCode: '33101'
        },
        orderItems: [
          {
            id: 5,
            productName: 'Robot Building Kit',
            productImage: '/api/placeholder/60/60',
            quantity: 1,
            price: 199.99
          }
        ]
      },
      {
        id: 'ORD-005',
        customerName: 'David Brown',
        customerEmail: 'david@example.com',
        status: 'cancelled',
        paymentStatus: 'refunded',
        total: 45.99,
        items: 1,
        createdAt: '2024-01-14T09:30:00Z',
        updatedAt: '2024-01-15T11:20:00Z',
        shippingAddress: {
          street: '654 Maple Ave',
          city: 'Seattle',
          state: 'WA',
          country: 'USA',
          postalCode: '98101'
        },
        orderItems: [
          {
            id: 6,
            productName: 'LED Strip Kit',
            productImage: '/api/placeholder/60/60',
            quantity: 1,
            price: 45.99
          }
        ]
      }
    ];

    setTimeout(() => {
      setOrders(mockOrders);
      setFilteredOrders(mockOrders);
      setLoading(false);
    }, 1000);
  }, []);

  // Filter orders
  useEffect(() => {
    let filtered = orders;

    if (searchQuery) {
      filtered = filtered.filter(order => 
        order.id.toLowerCase().includes(searchQuery.toLowerCase()) ||
        order.customerName.toLowerCase().includes(searchQuery.toLowerCase()) ||
        order.customerEmail.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    if (statusFilter !== 'all') {
      filtered = filtered.filter(order => order.status === statusFilter);
    }

    if (paymentFilter !== 'all') {
      filtered = filtered.filter(order => order.paymentStatus === paymentFilter);
    }

    setFilteredOrders(filtered);
    setPage(0);
  }, [searchQuery, statusFilter, paymentFilter, orders]);

  const stats = [
    {
      title: 'Total Orders',
      value: orders.length,
      icon: <OrderIcon fontSize="large" />,
      color: 'primary' as const,
      change: '+12%'
    },
    {
      title: 'Pending Orders',
      value: orders.filter(o => o.status === 'pending').length,
      icon: <PendingIcon fontSize="large" />,
      color: 'warning' as const,
      change: '+5%'
    },
    {
      title: 'Total Revenue',
      value: `$${orders.reduce((sum, o) => sum + o.total, 0).toFixed(2)}`,
      icon: <MoneyIcon fontSize="large" />,
      color: 'success' as const,
      change: '+18%'
    },
    {
      title: 'Processing',
      value: orders.filter(o => o.status === 'processing').length,
      icon: <TrendingUpIcon fontSize="large" />,
      color: 'secondary' as const,
      change: '+8%'
    }
  ];

  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>, order: Order) => {
    setMenuAnchor(event.currentTarget);
    setSelectedOrder(order);
  };

  const handleMenuClose = () => {
    setMenuAnchor(null);
    setSelectedOrder(null);
  };

  const handleStatusChange = (orderId: string, newStatus: Order['status']) => {
    setOrders(prev => prev.map(order => 
      order.id === orderId 
        ? { ...order, status: newStatus, updatedAt: new Date().toISOString() }
        : order
    ));
    handleMenuClose();
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'pending': return <PendingIcon />;
      case 'processing': return <TrendingUpIcon />;
      case 'shipped': return <ShippingIcon />;
      case 'delivered': return <CompleteIcon />;
      case 'cancelled': return <CancelIcon />;
      default: return <OrderIcon />;
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString();
  };

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '60vh' }}>
        <Typography variant="h6">Loading orders...</Typography>
      </Box>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          {/* Header */}
          <Box sx={{ mb: 4 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
              <Typography variant="h4" sx={{ fontWeight: 700 }}>
                Orders Management
              </Typography>
              <Box sx={{ display: 'flex', gap: 2 }}>
                <Button variant="outlined" startIcon={<DownloadIcon />}>
                  Export
                </Button>
                <Button variant="outlined" startIcon={<RefreshIcon />}>
                  Refresh
                </Button>
              </Box>
            </Box>

            {/* Stats Cards */}
            <Grid container spacing={3} sx={{ mb: 3 }}>
              {stats.map((stat, index) => (
                <Grid item xs={12} sm={6} md={3} key={index}>
                  <StatsCard className={stat.color}>
                    <CardContent>
                      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                        <Box>
                          <Typography variant="h4" sx={{ fontWeight: 700, mb: 1 }}>
                            {stat.value}
                          </Typography>
                          <Typography variant="body2" sx={{ opacity: 0.9, mb: 1 }}>
                            {stat.title}
                          </Typography>
                          <Typography variant="caption" sx={{ opacity: 0.8 }}>
                            {stat.change} from last month
                          </Typography>
                        </Box>
                        <Box sx={{ opacity: 0.8 }}>
                          {stat.icon}
                        </Box>
                      </Box>
                    </CardContent>
                  </StatsCard>
                </Grid>
              ))}
            </Grid>
          </Box>

          {/* Search and Filters */}
          <SearchToolbar>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, width: '100%', flexWrap: 'wrap' }}>
              <TextField
                placeholder="Search orders..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                size="small"
                InputProps={{
                  startAdornment: <SearchIcon sx={{ mr: 1, color: 'text.secondary' }} />,
                }}
                sx={{ minWidth: 300 }}
              />
              
              <FormControl size="small" sx={{ minWidth: 150 }}>
                <InputLabel>Status</InputLabel>
                <Select
                  value={statusFilter}
                  label="Status"
                  onChange={(e) => setStatusFilter(e.target.value)}
                >
                  <MenuItem value="all">All Status</MenuItem>
                  <MenuItem value="pending">Pending</MenuItem>
                  <MenuItem value="processing">Processing</MenuItem>
                  <MenuItem value="shipped">Shipped</MenuItem>
                  <MenuItem value="delivered">Delivered</MenuItem>
                  <MenuItem value="cancelled">Cancelled</MenuItem>
                  <MenuItem value="refunded">Refunded</MenuItem>
                </Select>
              </FormControl>

              <FormControl size="small" sx={{ minWidth: 150 }}>
                <InputLabel>Payment</InputLabel>
                <Select
                  value={paymentFilter}
                  label="Payment"
                  onChange={(e) => setPaymentFilter(e.target.value)}
                >
                  <MenuItem value="all">All Payments</MenuItem>
                  <MenuItem value="pending">Pending</MenuItem>
                  <MenuItem value="paid">Paid</MenuItem>
                  <MenuItem value="failed">Failed</MenuItem>
                  <MenuItem value="refunded">Refunded</MenuItem>
                </Select>
              </FormControl>
              
              <Box sx={{ flexGrow: 1 }} />
              
              <Tooltip title="Filter Options">
                <IconButton>
                  <FilterIcon />
                </IconButton>
              </Tooltip>
            </Box>
          </SearchToolbar>

          {/* Orders Table */}
          <Paper>
            <TableContainer>
              <Table>
                <TableHead>
                  <TableRow sx={{ bgcolor: 'grey.50' }}>
                    <TableCell>Order ID</TableCell>
                    <TableCell>Customer</TableCell>
                    <TableCell>Status</TableCell>
                    <TableCell>Payment</TableCell>
                    <TableCell>Items</TableCell>
                    <TableCell>Total</TableCell>
                    <TableCell>Date</TableCell>
                    <TableCell align="center">Actions</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {filteredOrders
                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                    .map((order) => (
                    <TableRow key={order.id} hover>
                      <TableCell>
                        <Typography variant="subtitle2" sx={{ fontWeight: 600 }}>
                          {order.id}
                        </Typography>
                      </TableCell>
                      <TableCell>
                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                          <Avatar
                            src={order.customerAvatar}
                            sx={{ width: 40, height: 40, mr: 2 }}
                          >
                            {order.customerName.charAt(0)}
                          </Avatar>
                          <Box>
                            <Typography variant="subtitle2" sx={{ fontWeight: 600 }}>
                              {order.customerName}
                            </Typography>
                            <Typography variant="caption" color="text.secondary">
                              {order.customerEmail}
                            </Typography>
                          </Box>
                        </Box>
                      </TableCell>
                      <TableCell>
                        <StatusChip
                          status={order.status}
                          label={order.status}
                          size="small"
                          icon={getStatusIcon(order.status)}
                        />
                      </TableCell>
                      <TableCell>
                        <Chip
                          label={order.paymentStatus}
                          size="small"
                          color={
                            order.paymentStatus === 'paid' ? 'success' :
                            order.paymentStatus === 'failed' ? 'error' :
                            order.paymentStatus === 'refunded' ? 'default' : 'warning'
                          }
                        />
                      </TableCell>
                      <TableCell>
                        <Badge badgeContent={order.items} color="primary">
                          <OrderIcon />
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <Typography variant="subtitle2" sx={{ fontWeight: 600 }}>
                          ${order.total.toFixed(2)}
                        </Typography>
                      </TableCell>
                      <TableCell>
                        <Typography variant="body2">
                          {formatDate(order.createdAt)}
                        </Typography>
                      </TableCell>
                      <TableCell align="center">
                        <IconButton
                          size="small"
                          onClick={(e) => handleMenuOpen(e, order)}
                        >
                          <MoreVertIcon />
                        </IconButton>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>

            <TablePagination
              rowsPerPageOptions={[5, 10, 25]}
              component="div"
              count={filteredOrders.length}
              rowsPerPage={rowsPerPage}
              page={page}
              onPageChange={(_, newPage) => setPage(newPage)}
              onRowsPerPageChange={(e) => {
                setRowsPerPage(parseInt(e.target.value, 10));
                setPage(0);
              }}
            />
          </Paper>

          {/* Actions Menu */}
          <Menu
            anchorEl={menuAnchor}
            open={Boolean(menuAnchor)}
            onClose={handleMenuClose}
          >
            <MenuItem onClick={() => {
              setOrderDetailsOpen(true);
              handleMenuClose();
            }}>
              <ViewIcon sx={{ mr: 1 }} />
              View Details
            </MenuItem>
            <MenuItem onClick={() => handleMenuClose()}>
              <EditIcon sx={{ mr: 1 }} />
              Edit Order
            </MenuItem>
            <MenuItem onClick={() => handleMenuClose()}>
              <PrintIcon sx={{ mr: 1 }} />
              Print Invoice
            </MenuItem>
            <Divider />
            <MenuItem onClick={() => handleStatusChange(selectedOrder?.id || '', 'processing')}>
              <TrendingUpIcon sx={{ mr: 1 }} />
              Mark as Processing
            </MenuItem>
            <MenuItem onClick={() => handleStatusChange(selectedOrder?.id || '', 'shipped')}>
              <ShippingIcon sx={{ mr: 1 }} />
              Mark as Shipped
            </MenuItem>
            <MenuItem onClick={() => handleStatusChange(selectedOrder?.id || '', 'delivered')}>
              <CompleteIcon sx={{ mr: 1 }} />
              Mark as Delivered
            </MenuItem>
            <Divider />
            <MenuItem onClick={() => handleStatusChange(selectedOrder?.id || '', 'cancelled')} sx={{ color: 'error.main' }}>
              <CancelIcon sx={{ mr: 1 }} />
              Cancel Order
            </MenuItem>
          </Menu>

          {/* Order Details Dialog */}
          <Dialog
            open={orderDetailsOpen}
            onClose={() => setOrderDetailsOpen(false)}
            maxWidth="md"
            fullWidth
          >
            <DialogTitle>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Typography variant="h6">Order Details - {selectedOrder?.id}</Typography>
                <StatusChip
                  status={selectedOrder?.status || 'pending'}
                  label={selectedOrder?.status || 'pending'}
                  size="small"
                />
              </Box>
            </DialogTitle>
            <DialogContent>
              {selectedOrder && (
                <Box>
                  <Tabs value={activeTab} onChange={(_, newValue) => setActiveTab(newValue)}>
                    <Tab label="Order Info" />
                    <Tab label="Customer" />
                    <Tab label="Items" />
                    <Tab label="Shipping" />
                  </Tabs>

                  {/* Order Info Tab */}
                  {activeTab === 0 && (
                    <Box sx={{ py: 3 }}>
                      <Grid container spacing={3}>
                        <Grid item xs={12} md={6}>
                          <Typography variant="subtitle2" gutterBottom>Order Information</Typography>
                          <Typography>Order ID: {selectedOrder.id}</Typography>
                          <Typography>Status: {selectedOrder.status}</Typography>
                          <Typography>Payment: {selectedOrder.paymentStatus}</Typography>
                          <Typography>Total: ${selectedOrder.total.toFixed(2)}</Typography>
                          <Typography>Items: {selectedOrder.items}</Typography>
                        </Grid>
                        <Grid item xs={12} md={6}>
                          <Typography variant="subtitle2" gutterBottom>Dates</Typography>
                          <Typography>Created: {formatDate(selectedOrder.createdAt)}</Typography>
                          <Typography>Updated: {formatDate(selectedOrder.updatedAt)}</Typography>
                        </Grid>
                      </Grid>
                    </Box>
                  )}

                  {/* Customer Tab */}
                  {activeTab === 1 && (
                    <Box sx={{ py: 3 }}>
                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
                        <Avatar src={selectedOrder.customerAvatar} sx={{ width: 60, height: 60, mr: 2 }}>
                          {selectedOrder.customerName.charAt(0)}
                        </Avatar>
                        <Box>
                          <Typography variant="h6">{selectedOrder.customerName}</Typography>
                          <Typography color="text.secondary">{selectedOrder.customerEmail}</Typography>
                        </Box>
                      </Box>
                    </Box>
                  )}

                  {/* Items Tab */}
                  {activeTab === 2 && (
                    <Box sx={{ py: 3 }}>
                      <List>
                        {selectedOrder.orderItems.map((item) => (
                          <ListItem key={item.id}>
                            <ListItemAvatar>
                              <Avatar src={item.productImage} variant="rounded">
                                <OrderIcon />
                              </Avatar>
                            </ListItemAvatar>
                            <ListItemText
                              primary={item.productName}
                              secondary={`Quantity: ${item.quantity} × $${item.price.toFixed(2)}`}
                            />
                            <Typography variant="subtitle2">
                              ${(item.quantity * item.price).toFixed(2)}
                            </Typography>
                          </ListItem>
                        ))}
                      </List>
                    </Box>
                  )}

                  {/* Shipping Tab */}
                  {activeTab === 3 && (
                    <Box sx={{ py: 3 }}>
                      <Typography variant="subtitle2" gutterBottom>Shipping Address</Typography>
                      <Typography>{selectedOrder.shippingAddress.street}</Typography>
                      <Typography>
                        {selectedOrder.shippingAddress.city}, {selectedOrder.shippingAddress.state} {selectedOrder.shippingAddress.postalCode}
                      </Typography>
                      <Typography>{selectedOrder.shippingAddress.country}</Typography>
                    </Box>
                  )}
                </Box>
              )}
            </DialogContent>
            <DialogActions>
              <Button onClick={() => setOrderDetailsOpen(false)}>Close</Button>
              <Button variant="contained" startIcon={<PrintIcon />}>
                Print Invoice
              </Button>
            </DialogActions>
          </Dialog>
        </motion.div>
  );
};

export default AdminOrders;